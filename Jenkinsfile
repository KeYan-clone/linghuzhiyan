pipeline {
    agent any
    
    environment {
        
        // DockerÈÖçÁΩÆ
        DOCKER_REGISTRY = 'localhost:5000'
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // KubernetesÈÖçÁΩÆ
        KUBECONFIG = credentials('kubeconfig')
        K8S_NAMESPACE = 'linghuzhiyan'
        
        // È°πÁõÆÈÖçÁΩÆ
        PROJECT_NAME = 'linghuzhiyan-micro'
        SERVICES = 'linghuzhiyan-auth-service,linghuzhiyan-user-service,linghuzhiyan-gateway,linghuzhiyan-config-server,linghuzhiyan-discovery-server,linghuzhiyan-monitor-service,linghuzhiyan-experiment-service,linghuzhiyan-discussion-service,linghuzhiyan-message-service,linghuzhiyan-resource-service'
        
        // Á≥ªÁªüÊ£ÄÊµã
        IS_WINDOWS = "${env.NODE_NAME?.toLowerCase()?.contains('windows') ?: isUnix() ? 'false' : 'true'}"
    }
    
    stages {
        stage('System Detection') {
            steps {
                script {
                    // Ê£ÄÊµãÊìç‰ΩúÁ≥ªÁªü
                    env.IS_WINDOWS = isUnix() ? 'false' : 'true'
                    
                    if (env.IS_WINDOWS == 'true') {
                        echo 'ü™ü Ê£ÄÊµãÂà∞WindowsÁ≥ªÁªü'
                        env.SHELL_EXECUTOR = 'powershell'
                        env.PATH_SEPARATOR = '\\'
                        env.DOCKER_COMPOSE_CMD = 'docker-compose'
                        env.KUBECTL_CMD = 'kubectl'
                        env.MAVEN_CMD = 'mvn'
                    } else {
                        echo 'üêß Ê£ÄÊµãÂà∞Unix/LinuxÁ≥ªÁªü'
                        env.SHELL_EXECUTOR = 'bash'
                        env.PATH_SEPARATOR = '/'
                        env.DOCKER_COMPOSE_CMD = 'docker-compose'
                        env.KUBECTL_CMD = 'kubectl'
                        env.MAVEN_CMD = 'mvn'
                    }
                    
                    echo "Á≥ªÁªüÁ±ªÂûã: ${env.IS_WINDOWS == 'true' ? 'Windows' : 'Unix/Linux'}"
                    echo "ShellÊâßË°åÂô®: ${env.SHELL_EXECUTOR}"
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'üì¶ Ê£ÄÂá∫‰ª£Á†Å...'
                checkout scm
                
                script {
                    if (env.IS_WINDOWS == 'true') {
                        env.GIT_COMMIT_SHORT = powershell(
                            script: 'git rev-parse --short HEAD',
                            returnStdout: true
                        ).trim()
                    } else {
                        env.GIT_COMMIT_SHORT = sh(
                            script: 'git rev-parse --short HEAD',
                            returnStdout: true
                        ).trim()
                    }
                    
                    env.BUILD_VERSION = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                }
                
                echo "ÊûÑÂª∫ÁâàÊú¨: ${env.BUILD_VERSION}"
            }
        }
        
        stage('Code Quality Check') {
            parallel {
                stage('Compile') {
                    steps {
                        echo 'üî® ÁºñËØëÈ°πÁõÆ...'
                        script {
                            if (env.IS_WINDOWS == 'true') {
                                powershell "${env.MAVEN_CMD} clean compile"
                            } else {
                                sh "${env.MAVEN_CMD} clean package"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                echo 'üê≥ ‰ΩøÁî®Docker ComposeÊûÑÂª∫ÊâÄÊúâÈïúÂÉè...'
                script {
                    if (env.IS_WINDOWS == 'true') {
                        powershell """
                            Write-Host "ÂºÄÂßã‰ΩøÁî®Docker ComposeÊûÑÂª∫ÊâÄÊúâÊúçÂä°ÈïúÂÉè..."
                            
                            # ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
                            \$env:BUILD_VERSION = "${env.BUILD_VERSION}"
                            \$env:DOCKER_REGISTRY = "${env.DOCKER_REGISTRY}"
                            \$env:VERSION = "${env.BUILD_VERSION}"
                            \$env:BUILD_DATE = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
                            
                            # ÊòæÁ§∫ÂΩìÂâçÁéØÂ¢ÉÂèòÈáè
                            Write-Host "ÊûÑÂª∫ÁâàÊú¨: \$env:BUILD_VERSION"
                            Write-Host "ÈïúÂÉè‰ªìÂ∫ì: \$env:DOCKER_REGISTRY"
                            Write-Host "ÊûÑÂª∫Êó•Êúü: \$env:BUILD_DATE"
                            
                            # ‰ΩøÁî®Docker ComposeÊûÑÂª∫ÊâÄÊúâÊúçÂä°
                            Write-Host "ÂºÄÂßãÊûÑÂª∫ÊâÄÊúâÊúçÂä°ÈïúÂÉè..."
                            docker-compose -f docker-compose.yml build --progress=plain --no-cache discovery config gateway auth user experiment resource message discussion monitor
                            
                            if (\$LASTEXITCODE -eq 0) {
                                Write-Host "‚úÖ ÊâÄÊúâÊúçÂä°ÈïúÂÉèÊûÑÂª∫ÊàêÂäü"
                                
                                # ÂÆö‰πâÊúçÂä°Êò†Â∞ÑÂÖ≥Á≥ª (composeÊúçÂä°Âêç -> ÂÆåÊï¥ÊúçÂä°Âêç)
                                \$serviceMap = @{
                                    'discovery' = 'linghuzhiyan-discovery-server'
                                    'config' = 'linghuzhiyan-config-server'
                                    'gateway' = 'linghuzhiyan-gateway'
                                    'auth' = 'linghuzhiyan-auth-service'
                                    'user' = 'linghuzhiyan-user-service'
                                    'monitor' = 'linghuzhiyan-monitor-service'
                                    'experiment' = 'linghuzhiyan-experiment-service'
                                    'discussion' = 'linghuzhiyan-discussion-service'
                                    'message' = 'linghuzhiyan-message-service'
                                    'resource' = 'linghuzhiyan-resource-service'
                                }
                                
                                foreach (\$composeService in \$serviceMap.Keys) {
                                    \$fullServiceName = \$serviceMap[\$composeService]
                                    Write-Host "Â§ÑÁêÜÊúçÂä°: \$composeService -> \$fullServiceName"
                                    
                                    # Ëé∑ÂèñcomposeÊûÑÂª∫ÁöÑÈïúÂÉèÂêç
                                    \$composeImageName = "linghuzhiyan/\$composeService"
                                    
                                    # ÈáçÊñ∞Ê†áËÆ∞ÈïúÂÉè‰∏∫‰ªìÂ∫ìÊ†ºÂºè
                                    docker tag "\$composeImageName:${env.BUILD_VERSION}" "${env.DOCKER_REGISTRY}/\$fullServiceName:${env.BUILD_VERSION}"
                                    docker tag "\$composeImageName:${env.BUILD_VERSION}" "${env.DOCKER_REGISTRY}/\$fullServiceName:latest"
                                    
                                    # Êé®ÈÄÅÈïúÂÉè
                                    Write-Host "Êé®ÈÄÅ \$fullServiceName ÈïúÂÉèÂà∞‰ªìÂ∫ì..."
                                    docker push "${env.DOCKER_REGISTRY}/\$fullServiceName:${env.BUILD_VERSION}"
                                    docker push "${env.DOCKER_REGISTRY}/\$fullServiceName:latest"
                                    
                                    Write-Host "‚úÖ \$fullServiceName ÈïúÂÉèÊé®ÈÄÅÂÆåÊàê"
                                }
                                
                                Write-Host "‚úÖ ÊâÄÊúâÈïúÂÉèÊûÑÂª∫ÂíåÊé®ÈÄÅÂÆåÊàê"
                            } else {
                                Write-Host "‚ùå Docker ComposeÊûÑÂª∫Â§±Ë¥•"
                                exit 1
                            }
                        """
                    } else {
                        sh """
                            echo "ÂºÄÂßã‰ΩøÁî®Docker ComposeÊûÑÂª∫ÊâÄÊúâÊúçÂä°ÈïúÂÉè..."
                            
                            # ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
                            export BUILD_VERSION="${env.BUILD_VERSION}"
                            export DOCKER_REGISTRY="${env.DOCKER_REGISTRY}"
                            export VERSION="${env.BUILD_VERSION}"
                            export BUILD_DATE=\$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                            
                            # ÊòæÁ§∫ÂΩìÂâçÁéØÂ¢ÉÂèòÈáè
                            echo "ÊûÑÂª∫ÁâàÊú¨: \$BUILD_VERSION"
                            echo "ÈïúÂÉè‰ªìÂ∫ì: \$DOCKER_REGISTRY"
                            echo "ÊûÑÂª∫Êó•Êúü: \$BUILD_DATE"
                            
                            # ‰ΩøÁî®Docker ComposeÊûÑÂª∫ÊâÄÊúâÊúçÂä°
                            echo "ÂºÄÂßãÊûÑÂª∫ÊâÄÊúâÊúçÂä°ÈïúÂÉè..."
                            docker-compose -f docker-compose.yml build --progress=plain --no-cache discovery config gateway auth user experiment resource message discussion monitor
                            
                            if [ \$? -eq 0 ]; then
                                echo "‚úÖ ÊâÄÊúâÊúçÂä°ÈïúÂÉèÊûÑÂª∫ÊàêÂäü"
                                
                                # ÂÆö‰πâÊúçÂä°Êò†Â∞ÑÂÖ≥Á≥ª (composeÊúçÂä°Âêç -> ÂÆåÊï¥ÊúçÂä°Âêç)
                                declare -A service_map=(
                                    ["discovery"]="linghuzhiyan-discovery-server"
                                    ["config"]="linghuzhiyan-config-server"
                                    ["gateway"]="linghuzhiyan-gateway"
                                    ["auth"]="linghuzhiyan-auth-service"
                                    ["user"]="linghuzhiyan-user-service"
                                    ["monitor"]="linghuzhiyan-monitor-service"
                                    ["experiment"]="linghuzhiyan-experiment-service"
                                    ["discussion"]="linghuzhiyan-discussion-service"
                                    ["message"]="linghuzhiyan-message-service"
                                    ["resource"]="linghuzhiyan-resource-service"
                                )
                                
                                for compose_service in "\${!service_map[@]}"; do
                                    full_service_name="\${service_map[\$compose_service]}"
                                    echo "Â§ÑÁêÜÊúçÂä°: \$compose_service -> \$full_service_name"
                                    
                                    # Ëé∑ÂèñcomposeÊûÑÂª∫ÁöÑÈïúÂÉèÂêç
                                    compose_image_name="linghuzhiyan/\$compose_service"
                                    
                                    # ÈáçÊñ∞Ê†áËÆ∞ÈïúÂÉè‰∏∫‰ªìÂ∫ìÊ†ºÂºè
                                    docker tag "\$compose_image_name:${env.BUILD_VERSION}" "${env.DOCKER_REGISTRY}/\$full_service_name:${env.BUILD_VERSION}"
                                    docker tag "\$compose_image_name:${env.BUILD_VERSION}" "${env.DOCKER_REGISTRY}/\$full_service_name:latest"
                                    
                                    # Êé®ÈÄÅÈïúÂÉè
                                    echo "Êé®ÈÄÅ \$full_service_name ÈïúÂÉèÂà∞‰ªìÂ∫ì..."
                                    docker push "${env.DOCKER_REGISTRY}/\$full_service_name:${env.BUILD_VERSION}"
                                    docker push "${env.DOCKER_REGISTRY}/\$full_service_name:latest"
                                    
                                    echo "‚úÖ \$full_service_name ÈïúÂÉèÊé®ÈÄÅÂÆåÊàê"
                                done
                                
                                echo "‚úÖ ÊâÄÊúâÈïúÂÉèÊûÑÂª∫ÂíåÊé®ÈÄÅÂÆåÊàê"
                            else
                                echo "‚ùå Docker ComposeÊûÑÂª∫Â§±Ë¥•"
                                exit 1
                            fi
                        """
                    }
                }
            }
            post {
                always {
                    script {
                        // Ê∏ÖÁêÜÊú¨Âú∞ÈïúÂÉè
                        if (env.IS_WINDOWS == 'true') {
                            powershell '''
                                docker image prune -f
                                docker system prune -f --volumes
                            '''
                        } else {
                            sh '''
                                docker image prune -f
                                docker system prune -f --volumes
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Deploy to K8s') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo '‚ò∏Ô∏è ÈÉ®ÁΩ≤Âà∞Kubernetes...'
                script {
                    if (env.IS_WINDOWS == 'true') {
                        powershell '''
                            # Êõ¥Êñ∞ÈïúÂÉèÊ†áÁ≠æ
                            $services = "${env.SERVICES}" -split ","
                            foreach ($service in $services) {
                                $serviceName = $service -replace "linghuzhiyan-", ""
                                $k8sFile = "k8s\\$serviceName.yaml"
                                if (Test-Path $k8sFile) {
                                    (Get-Content $k8sFile) -replace "image: .*/$service:.*", "image: ${env.DOCKER_REGISTRY}/$service:${env.BUILD_VERSION}" | Set-Content $k8sFile
                                }
                            }
                            
                            # ÂàõÂª∫ÂëΩÂêçÁ©∫Èó¥
                            kubectl create namespace ${env.K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            
                            # ÈÉ®ÁΩ≤Âü∫Á°ÄËÆæÊñΩ
                            Write-Host "ÈÉ®ÁΩ≤Âü∫Á°ÄËÆæÊñΩ..."
                            if (Test-Path "k8s\\namespace.yaml") { kubectl apply -f k8s\\namespace.yaml -n ${env.K8S_NAMESPACE} }
                            kubectl apply -f k8s\\mysql.yaml -n ${env.K8S_NAMESPACE}
                            kubectl apply -f k8s\\redis.yaml -n ${env.K8S_NAMESPACE}
                            if (Test-Path "k8s\\minio.yaml") { kubectl apply -f k8s\\minio.yaml -n ${env.K8S_NAMESPACE} }
                            
                            # Á≠âÂæÖÂü∫Á°ÄËÆæÊñΩÂ∞±Áª™
                            kubectl wait --for=condition=ready pod -l app=mysql -n ${env.K8S_NAMESPACE} --timeout=300s
                            kubectl wait --for=condition=ready pod -l app=redis -n ${env.K8S_NAMESPACE} --timeout=300s
                            
                            # ÈÉ®ÁΩ≤Ê†∏ÂøÉÊúçÂä°
                            Write-Host "ÈÉ®ÁΩ≤Ê†∏ÂøÉÊúçÂä°..."
                            kubectl apply -f k8s\\config-server.yaml -n ${env.K8S_NAMESPACE}
                            kubectl apply -f k8s\\discovery-server.yaml -n ${env.K8S_NAMESPACE}
                            
                            # Á≠âÂæÖÊ†∏ÂøÉÊúçÂä°Â∞±Áª™
                            kubectl wait --for=condition=ready pod -l app=config-server -n ${env.K8S_NAMESPACE} --timeout=300s
                            kubectl wait --for=condition=ready pod -l app=discovery-server -n ${env.K8S_NAMESPACE} --timeout=300s
                            
                            # ÈÉ®ÁΩ≤‰∏öÂä°ÊúçÂä°
                            Write-Host "ÈÉ®ÁΩ≤‰∏öÂä°ÊúçÂä°..."
                            kubectl apply -f k8s\\auth-service.yaml -n ${env.K8S_NAMESPACE}
                            kubectl apply -f k8s\\user-service.yaml -n ${env.K8S_NAMESPACE}
                            kubectl apply -f k8s\\experiment-service.yaml -n ${env.K8S_NAMESPACE}
                            kubectl apply -f k8s\\discussion-service.yaml -n ${env.K8S_NAMESPACE}
                            kubectl apply -f k8s\\message-service.yaml -n ${env.K8S_NAMESPACE}
                            kubectl apply -f k8s\\resource-service.yaml -n ${env.K8S_NAMESPACE}
                            kubectl apply -f k8s\\monitor-service.yaml -n ${env.K8S_NAMESPACE}
                            
                            # ÈÉ®ÁΩ≤ÁΩëÂÖ≥
                            Write-Host "ÈÉ®ÁΩ≤ÁΩëÂÖ≥..."
                            kubectl apply -f k8s\\gateway.yaml -n ${env.K8S_NAMESPACE}
                            
                            # Á≠âÂæÖÊâÄÊúâÊúçÂä°Â∞±Áª™
                            Write-Host "Á≠âÂæÖÊúçÂä°Â∞±Áª™..."
                            kubectl wait --for=condition=ready pod -l app=gateway -n ${env.K8S_NAMESPACE} --timeout=600s
                        '''
                    } else {
                        sh '''
                            # Êõ¥Êñ∞ÈïúÂÉèÊ†áÁ≠æ
                            for service in $(echo ${SERVICES} | tr ',' ' '); do
                                service_name=$(echo $service | sed 's/linghuzhiyan-//')
                                k8s_file="k8s/${service_name}.yaml"
                                if [ -f "$k8s_file" ]; then
                                    sed -i "s|image: .*/${service}:.*|image: ${DOCKER_REGISTRY}/${service}:${BUILD_VERSION}|g" "$k8s_file"
                                fi
                            done
                            
                            # ÂàõÂª∫ÂëΩÂêçÁ©∫Èó¥
                            kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            
                            # ÈÉ®ÁΩ≤Âü∫Á°ÄËÆæÊñΩ
                            echo "ÈÉ®ÁΩ≤Âü∫Á°ÄËÆæÊñΩ..."
                            [ -f "k8s/namespace.yaml" ] && kubectl apply -f k8s/namespace.yaml -n ${K8S_NAMESPACE} || true
                            kubectl apply -f k8s/mysql.yaml -n ${K8S_NAMESPACE}
                            kubectl apply -f k8s/redis.yaml -n ${K8S_NAMESPACE}
                            [ -f "k8s/minio.yaml" ] && kubectl apply -f k8s/minio.yaml -n ${K8S_NAMESPACE} || true
                            
                            # Á≠âÂæÖÂü∫Á°ÄËÆæÊñΩÂ∞±Áª™
                            kubectl wait --for=condition=ready pod -l app=mysql -n ${K8S_NAMESPACE} --timeout=300s
                            kubectl wait --for=condition=ready pod -l app=redis -n ${K8S_NAMESPACE} --timeout=300s
                            
                            # ÈÉ®ÁΩ≤Ê†∏ÂøÉÊúçÂä°
                            echo "ÈÉ®ÁΩ≤Ê†∏ÂøÉÊúçÂä°..."
                            kubectl apply -f k8s/config-server.yaml -n ${K8S_NAMESPACE}
                            kubectl apply -f k8s/discovery-server.yaml -n ${K8S_NAMESPACE}
                            
                            # Á≠âÂæÖÊ†∏ÂøÉÊúçÂä°Â∞±Áª™
                            kubectl wait --for=condition=ready pod -l app=config-server -n ${K8S_NAMESPACE} --timeout=300s
                            kubectl wait --for=condition=ready pod -l app=discovery-server -n ${K8S_NAMESPACE} --timeout=300s
                            
                            # ÈÉ®ÁΩ≤‰∏öÂä°ÊúçÂä°
                            echo "ÈÉ®ÁΩ≤‰∏öÂä°ÊúçÂä°..."
                            kubectl apply -f k8s/auth-service.yaml -n ${K8S_NAMESPACE}
                            kubectl apply -f k8s/user-service.yaml -n ${K8S_NAMESPACE}
                            kubectl apply -f k8s/experiment-service.yaml -n ${K8S_NAMESPACE}
                            kubectl apply -f k8s/discussion-service.yaml -n ${K8S_NAMESPACE}
                            kubectl apply -f k8s/message-service.yaml -n ${K8S_NAMESPACE}
                            kubectl apply -f k8s/resource-service.yaml -n ${K8S_NAMESPACE}
                            kubectl apply -f k8s/monitor-service.yaml -n ${K8S_NAMESPACE}
                            
                            # ÈÉ®ÁΩ≤ÁΩëÂÖ≥
                            echo "ÈÉ®ÁΩ≤ÁΩëÂÖ≥..."
                            kubectl apply -f k8s/gateway.yaml -n ${K8S_NAMESPACE}
                            
                            # Á≠âÂæÖÊâÄÊúâÊúçÂä°Â∞±Áª™
                            echo "Á≠âÂæÖÊúçÂä°Â∞±Áª™..."
                            kubectl wait --for=condition=ready pod -l app=gateway -n ${K8S_NAMESPACE} --timeout=600s
                        '''
                    }
                }
            }
            post {
                success {
                    echo '‚úÖ KubernetesÈÉ®ÁΩ≤ÊàêÂäü'
                }
                failure {
                    echo '‚ùå KubernetesÈÉ®ÁΩ≤Â§±Ë¥•'
                    script {
                        if (env.IS_WINDOWS == 'true') {
                            powershell '''
                                Write-Host "Êü•ÁúãÈÉ®ÁΩ≤Áä∂ÊÄÅ:"
                                kubectl get pods -n ${env.K8S_NAMESPACE}
                                kubectl get services -n ${env.K8S_NAMESPACE}
                                
                                Write-Host "Êü•ÁúãÂ§±Ë¥•ÁöÑPodÊó•Âøó:"
                                $failedPods = kubectl get pods -n ${env.K8S_NAMESPACE} --field-selector=status.phase!=Running --no-headers | ForEach-Object { ($_ -split "\\s+")[0] }
                                foreach ($pod in $failedPods) {
                                    if ($pod) {
                                        Write-Host "=== Logs for $pod ==="
                                        kubectl logs $pod -n ${env.K8S_NAMESPACE} --tail=50
                                    }
                                }
                            '''
                        } else {
                            sh '''
                                echo "Êü•ÁúãÈÉ®ÁΩ≤Áä∂ÊÄÅ:"
                                kubectl get pods -n ${K8S_NAMESPACE}
                                kubectl get services -n ${K8S_NAMESPACE}
                                
                                echo "Êü•ÁúãÂ§±Ë¥•ÁöÑPodÊó•Âøó:"
                                kubectl get pods -n ${K8S_NAMESPACE} --field-selector=status.phase!=Running --no-headers | \\
                                awk '{print $1}' | xargs -I {} kubectl logs {} -n ${K8S_NAMESPACE} --tail=50 || true
                            '''
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Ê∏ÖÁêÜÁéØÂ¢É...'
            
            // Ê∏ÖÁêÜÂ∑•‰ΩúÁ©∫Èó¥
            cleanWs(
                cleanWhenNotBuilt: false,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true,
                patterns: [
                    [pattern: 'target/', type: 'INCLUDE'],
                    [pattern: '.mvn/', type: 'INCLUDE'],
                    [pattern: 'docker-compose.log', type: 'INCLUDE']
                ]
            )
        }
        
        success {
            echo '‚úÖ ÊµÅÊ∞¥Á∫øÊâßË°åÊàêÂäüÔºÅ'
            
            // ÂèëÈÄÅÊàêÂäüÈÄöÁü•
            script {
                def systemInfo = env.IS_WINDOWS == 'true' ? 'Windows' : 'Unix/Linux'
                emailext (
                    subject: "‚úÖ ÊûÑÂª∫ÊàêÂäü: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (${systemInfo})",
                    body: """
                        <h3>ÊûÑÂª∫ÊàêÂäü</h3>
                        <p><strong>È°πÁõÆ:</strong> ${env.JOB_NAME}</p>
                        <p><strong>ÊûÑÂª∫Âè∑:</strong> ${env.BUILD_NUMBER}</p>
                        <p><strong>ÁâàÊú¨:</strong> ${env.BUILD_VERSION}</p>
                        <p><strong>ÂàÜÊîØ:</strong> ${env.BRANCH_NAME}</p>
                        <p><strong>Êèê‰∫§:</strong> ${env.GIT_COMMIT_SHORT}</p>
                        <p><strong>ÊûÑÂª∫Êó∂Èó¥:</strong> ${currentBuild.durationString}</p>
                        <p><strong>ÊûÑÂª∫ÁéØÂ¢É:</strong> ${systemInfo}</p>
                        <p><strong>ÊûÑÂª∫ÈìæÊé•:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        
                        <h4>ÈÉ®ÁΩ≤‰ø°ÊÅØ:</h4>
                        <p>Â∫îÁî®Â∑≤ÊàêÂäüÈÉ®ÁΩ≤Âà∞KubernetesÈõÜÁæ§</p>
                        <p>ÂëΩÂêçÁ©∫Èó¥: ${env.K8S_NAMESPACE}</p>
                        
                        <h4>ÊµãËØïÁªìÊûú:</h4>
                        <p>‚úÖ ÂçïÂÖÉÊµãËØï: ÈÄöËøá</p>
                        <p>‚úÖ ÈõÜÊàêÊµãËØï: ÈÄöËøá</p>
                        <p>‚úÖ ÂÜíÁÉüÊµãËØï: ÈÄöËøá</p>
                    """,
                    to: "${env.CHANGE_AUTHOR_EMAIL}",
                    mimeType: 'text/html'
                )
            }
        }
        
        failure {
            echo '‚ùå ÊµÅÊ∞¥Á∫øÊâßË°åÂ§±Ë¥•ÔºÅ'
            
            // ÂèëÈÄÅÂ§±Ë¥•ÈÄöÁü•
            script {
                def systemInfo = env.IS_WINDOWS == 'true' ? 'Windows' : 'Unix/Linux'
                emailext (
                    subject: "‚ùå ÊûÑÂª∫Â§±Ë¥•: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (${systemInfo})",
                    body: """
                        <h3>ÊûÑÂª∫Â§±Ë¥•</h3>
                        <p><strong>È°πÁõÆ:</strong> ${env.JOB_NAME}</p>
                        <p><strong>ÊûÑÂª∫Âè∑:</strong> ${env.BUILD_NUMBER}</p>
                        <p><strong>ÂàÜÊîØ:</strong> ${env.BRANCH_NAME}</p>
                        <p><strong>Â§±Ë¥•Èò∂ÊÆµ:</strong> ${env.STAGE_NAME}</p>
                        <p><strong>ÊûÑÂª∫ÁéØÂ¢É:</strong> ${systemInfo}</p>
                        <p><strong>ÊûÑÂª∫ÈìæÊé•:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        <p><strong>ÊéßÂà∂Âè∞ËæìÂá∫:</strong> <a href="${env.BUILD_URL}console">${env.BUILD_URL}console</a></p>
                        
                        <h4>ËØ∑Ê£ÄÊü•‰ª•‰∏ãÂÜÖÂÆπ:</h4>
                        <ul>
                            <li>ÂçïÂÖÉÊµãËØïÊòØÂê¶ÈÄöËøá</li>
                            <li>‰ª£Á†ÅÊòØÂê¶ÁºñËØëÊàêÂäü</li>
                            <li>DockerÈïúÂÉèÊòØÂê¶ÊûÑÂª∫ÊàêÂäü</li>
                            <li>KubernetesÈÉ®ÁΩ≤ÊòØÂê¶Ê≠£Â∏∏</li>
                            <li>ÁéØÂ¢ÉÈÖçÁΩÆÊòØÂê¶Ê≠£Á°ÆÔºà${systemInfo}Ôºâ</li>
                        </ul>
                    """,
                    to: "${env.CHANGE_AUTHOR_EMAIL}",
                    mimeType: 'text/html'
                )
            }
        }
        
        unstable {
            echo '‚ö†Ô∏è ÊµÅÊ∞¥Á∫øÊâßË°å‰∏çÁ®≥ÂÆöÔºÅ'
        }
    }
}
