services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-password}
    command: ["mysqld", "--default-authentication-plugin=mysql_native_password", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci"]
    ports:
      - "3307:3306"
    volumes:
      - ./docker/mysql/data:/var/lib/mysql
      - ./docker/mysql/initdb.d:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"

  mongo:
    image: mongo:6
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-password}
    # 如需本机调试可开放端口；生产可省略映射
    # ports:
    #   - "27017:27017"
    # volumes:
    #   - ./docker/mongo/data:/data/db
    healthcheck:
      # 使用 Compose 变量展开，在部署时将用户名/密码写死到命令中，避免 $VAR 在 JSON 形式中不被 shell 展开
      test: ["CMD", "mongosh", "--quiet", "mongodb://${MONGODB_USERNAME:-root}:${MONGODB_PASSWORD:-password}@localhost:27017/admin", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 5s
      retries: 10

  minio:
    image: minio/minio:RELEASE.2024-01-11T07-46-16Z
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./docker/minio/data:/data

  discovery:
    build:
      context: .
      dockerfile: ./linghuzhiyan-discovery-server/Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-latest}
      target: runtime
    image: linghuzhiyan/discovery-server:${VERSION:-latest}
    container_name: discovery
    ports:
      - "8761:8761"
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  config:
    build:
      context: .
      dockerfile: ./linghuzhiyan-config-server/Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-latest}
      target: runtime
    image: linghuzhiyan/config-server:${VERSION:-latest}
    container_name: config
    depends_on:
      discovery:
        condition: service_healthy
    ports:
      - "8888:8888"
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m"
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: "http://admin:admin123@discovery:8761/eureka/"
    volumes:
      - ./config-repo:/app/config-repo:ro
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8888/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 20

  gateway:
    build:
      context: .
      dockerfile: ./linghuzhiyan-gateway/Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-latest}
      target: runtime
    image: linghuzhiyan/gateway:${VERSION:-latest}
    container_name: gateway
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config:config123@config:8888"
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: "http://admin:admin123@discovery:8761/eureka/"
      SPRING_REDIS_HOST: "redis"
      SPRING_REDIS_PORT: "6379"

  auth:
    build:
      context: .
      dockerfile: ./linghuzhiyan-auth-service/Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-latest}
      target: runtime
    image: linghuzhiyan/auth-service:${VERSION:-latest}
    container_name: auth
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      config:
        condition: service_healthy
      discovery:
        condition: service_started
    ports:
      - "8084:8084"
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m"
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_USERNAME: "root"
      DB_PASSWORD: "${DB_PASSWORD:-password}"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY:-minioadmin}"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY:-minioadmin}"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config:config123@config:8888"
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: "http://admin:admin123@discovery:8761/eureka/"
      SPRING_REDIS_HOST: "redis"
      SPRING_REDIS_PORT: "6379"

  user:
    build:
      context: .
      dockerfile: ./linghuzhiyan-user-service/Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-latest}
      target: runtime
    image: linghuzhiyan/user-service:${VERSION:-latest}
    container_name: user
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      config:
        condition: service_healthy
      discovery:
        condition: service_started
    ports:
      - "8082:8082"
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m"
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_USERNAME: "root"
      DB_PASSWORD: "${DB_PASSWORD:-password}"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY:-minioadmin}"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY:-minioadmin}"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config:config123@config:8888"
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: "http://admin:admin123@discovery:8761/eureka/"
      SPRING_REDIS_HOST: "redis"
      SPRING_REDIS_PORT: "6379"

  experiment:
    build:
      context: .
      dockerfile: ./linghuzhiyan-experiment-service/Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-latest}
      target: runtime
    image: linghuzhiyan/experiment-service:${VERSION:-latest}
    container_name: experiment
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      config:
        condition: service_healthy
      discovery:
        condition: service_started
    ports:
      - "8083:8083"
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m"
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_USERNAME: "root"
      DB_PASSWORD: "${DB_PASSWORD:-password}"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY:-minioadmin}"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY:-minioadmin}"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config:config123@config:8888"
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: "http://admin:admin123@discovery:8761/eureka/"
      SPRING_REDIS_HOST: "redis"
      SPRING_REDIS_PORT: "6379"

  resource:
    build:
      context: .
      dockerfile: ./linghuzhiyan-resource-service/Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-latest}
      target: runtime
    image: linghuzhiyan/resource-service:${VERSION:-latest}
    container_name: resource
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      config:
        condition: service_healthy
      discovery:
        condition: service_started
    ports:
      - "8086:8086"
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m"
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_USERNAME: "root"
      DB_PASSWORD: "${DB_PASSWORD:-password}"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY:-minioadmin}"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY:-minioadmin}"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config:config123@config:8888"
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: "http://admin:admin123@discovery:8761/eureka/"
      SPRING_REDIS_HOST: "redis"
      SPRING_REDIS_PORT: "6379"

  message:
    build:
      context: .
      dockerfile: ./linghuzhiyan-message-service/Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-latest}
      target: runtime
    image: linghuzhiyan/message-service:${VERSION:-latest}
    container_name: message
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      config:
        condition: service_healthy
      discovery:
        condition: service_started
    ports:
      - "8085:8085"
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m"
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_USERNAME: "root"
      DB_PASSWORD: "${DB_PASSWORD:-password}"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY:-minioadmin}"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY:-minioadmin}"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config:config123@config:8888"
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: "http://admin:admin123@discovery:8761/eureka/"
      SPRING_REDIS_HOST: "redis"
      SPRING_REDIS_PORT: "6379"

  discussion:
    build:
      context: .
      dockerfile: ./linghuzhiyan-discussion-service/Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-latest}
      target: runtime
    image: linghuzhiyan/discussion-service:${VERSION:-latest}
    container_name: discussion
    depends_on:
      mongo:
        condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      config:
        condition: service_healthy
      discovery:
        condition: service_started
    ports:
      - "8087:8087"
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m"
      # MongoDB 连接信息（覆盖配置中心中的默认 localhost）
      MONGODB_HOST: "mongo"
      MONGODB_PORT: "27017"
      MONGODB_USERNAME: "${MONGODB_USERNAME:-root}"
      MONGODB_PASSWORD: "${MONGODB_PASSWORD:-password}"
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_USERNAME: "root"
      DB_PASSWORD: "${DB_PASSWORD:-password}"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY:-minioadmin}"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY:-minioadmin}"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config:config123@config:8888"
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: "http://admin:admin123@discovery:8761/eureka/"
      SPRING_REDIS_HOST: "redis"
      SPRING_REDIS_PORT: "6379"

  monitor:
    build:
      context: .
      dockerfile: ./linghuzhiyan-monitor-service/Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-latest}
      target: runtime
    image: linghuzhiyan/monitor-service:${VERSION:-latest}
    container_name: monitor
    depends_on:
      config:
        condition: service_healthy
      discovery:
        condition: service_started
    ports:
      - "8090:8090"
    environment:
      JAVA_OPTS: "-Xms256m -Xmx512m"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://config:config123@config:8888"
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: "http://admin:admin123@discovery:8761/eureka/"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 3s
      retries: 3

networks:
  default:
    name: linghuzhiyan-net
    driver: bridge
